buildscript {
	repositories {
		maven { url "https://plugins.gradle.org/m2/" }
        maven { url "http://repo.spring.io/libs-snapshot" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.2.RELEASE")
		classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:3.0.3'
		classpath 'gradle.plugin.com.google.protobuf:protobuf-gradle-plugin:0.7.3'
		classpath 'io.spring.gradle:dependency-management-plugin:0.5.4.RELEASE'
		classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
		classpath 'com.github.skhatri:gradle-s3-plugin:1.0.2'
	}
}

ext {
	releaseBuild = hasProperty('releaseBuild') ? releaseBuild : System.getenv('RELEASE_BUILD')
}

apply plugin: 'distribution'

apply plugin: 's3'
s3 {
    bucket = 'sitewhere'
    awsProfile = 'gradle'
}

allprojects {
    group = 'com.sitewhere'
	version = '1.8.0'
	
    repositories {
        maven { url "http://repo.maven.apache.org/maven2" }
        maven { url 'http://maven.restlet.org' }
        maven { url "https://jitpack.io" }
        maven { url "http://dist.wso2.org/maven2/" }
        maven { url "http://oss.jfrog.org/artifactory/oss-release-local/" }
        maven { url "https://oss.sonatype.org/content/repositories/ksoap2-android-releases/" }
    }
}

subprojects {
	apply plugin: 'eclipse'
 	apply plugin: 'io.spring.dependency-management'
 	
    apply plugin: 'java'
    
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
    
	dependencyManagement {
		imports {
			mavenBom 'io.spring.platform:platform-bom:2.0.2.RELEASE'
		}
	}
  
    dependencies {
        compile(group: 'log4j', name: 'log4j')
        testCompile group: 'junit', name: 'junit'
    }
    test {
        exclude '**/*'
    }

    javadoc {
    	failOnError = false
        options.footer = '<script>(function(i,s,o,g,r,a,m){i["GoogleAnalyticsObject"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)})(window,document,"script","//www.google-analytics.com/analytics.js","ga");ga("create", "UA-42457307-1", {"cookieDomain": "sitewhere.org"});ga("send", "pageview");</script>'
    }
    
	if (releaseBuild) {
    	apply plugin: 'com.bmuschko.nexus'

		// Upload archives to Amazon S3
		uploadArchives {
//			dependsOn uploadServerZip
//			dependsOn uploadServerTar
		}
		
		// Set up default POM to be uploaded to Nexus.
		modifyPom {
			project {
				name project.description
				description project.description
				url 'http://www.sitewhere.org/'
				inceptionYear '2009'
				
				scm {
					url 'https://github.com/sitewhere/sitewhere'
					connection 'https://github.com/sitewhere/sitewhere.git'
				}
	
				issueManagement {
					system 'Jira'
					url 'https://sitewhere.atlassian.net'
				}
				
				organization {
					name 'SiteWhere, LLC.'
					url 'http://www.sitewhere.com/'
				}
	
				licenses {
					license {
						name 'Common Public Attribution License Version 1.0 (CPAL-1.0)'
						url 'http://opensource.org/licenses/CPAL-1.0'
						distribution 'repo'
					}
				}
	
				developers {
					developer {
						id 'derekadams'
						name 'Derek Adams'
						email 'derek.adams@sitewhere.com'
					}
				}
			}
		}
    }
}

// Arranges files to be packaged as a distribution.
task createServerDistro(dependsOn: subprojects.build) {
    doLast {
 
        copy {
            from(project.projectDir.path + '/server')
            into "$buildDir/sitewhere" 
		}
    	
        copy {
            from(project(':sitewhere-web').war)
            into "$buildDir/sitewhere/lib" 

            rename { String fileName ->
                fileName.replace("sitewhere-web-${version}.war", 'sitewhere.war')
            }
        }
    }
}

// Build server zip distribution.
task serverZip(type: Zip, dependsOn: createServerDistro) {
    baseName = 'sitewhere-server'
    from "$buildDir/sitewhere"
    into "${baseName}-${project.version}"
}

// Upload server zip file to Amazon S3
task uploadServerZip(type: com.github.skhatri.s3aws.plugin.S3UploadTask, dependsOn: serverZip) {
    key = "sitewhere-server-${project.version}.zip"
    file = "$buildDir/distributions/sitewhere-server-${project.version}.zip"
    
    doLast {
    	println 'Uploaded server zip to Amazon S3.'
    }
}

// Build server tar distribution.
task serverTar(type: Tar, dependsOn: createServerDistro) {
    baseName = 'sitewhere-server'
    compression = 'GZIP'
 	from("$buildDir/sitewhere") {
		exclude ('**/*.sh')
	}
	from("$buildDir/sitewhere") {
		include ('**/*.sh')
		fileMode 0755
	}
	into "${baseName}-${project.version}"
}

// Upload server tar file to Amazon S3
task uploadServerTar(type: com.github.skhatri.s3aws.plugin.S3UploadTask, dependsOn: serverTar) {
    key = "sitewhere-server-${project.version}.tgz"
    file = "$buildDir/distributions/sitewhere-server-${project.version}.tgz"
    
    doLast {
    	println 'Uploaded server tar to Amazon S3.'
    }
}
